// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  ID        Int        @id @default(autoincrement())
  src       String
  imgAlt    String
  createdAt DateTime   @default(now()) @db.Timestamptz
  updatedAt DateTime   @updatedAt @db.Timestamptz
  deletedAt DateTime?  @db.Timestamptz
  user      User[]
  group     Group[]
  activity  Activity[]
}

model User {
  ID        Int              @id @default(autoincrement())
  username  String           @unique
  email     String           @unique
  password  String
  salt      String
  createdAt DateTime         @default(now()) @db.Timestamptz
  updatedAt DateTime         @updatedAt @db.Timestamptz
  deletedAt DateTime?        @db.Timestamptz
  groups    GroupUser[]
  messages  Message[]
  activites ActivityMember[]
  img       Image?           @relation(fields: [imageId], references: [ID])
  imageId   Int?
}

enum GroupType {
  PUBLIC
  PRIVATE
  LOCKED
}

model Group {
  ID          Int         @id @default(autoincrement())
  type        GroupType   @default(PUBLIC)
  name        String      @unique
  description String?
  maxSize     Int
  createdAt   DateTime    @default(now()) @db.Timestamptz
  updatedAt   DateTime    @updatedAt @db.Timestamptz
  deletedAt   DateTime?   @db.Timestamptz
  users       GroupUser[]
  messages    Message[]
  activity    Activity    @relation(fields: [activityId], references: [ID])
  activityId  Int
  startDate   DateTime?   @db.Timestamptz()
  endDate     DateTime?   @db.Timestamptz()
  location    String
  tags        String[]
  img         Image?      @relation(fields: [imageId], references: [ID])
  imageId     Int?
}

enum GroupRole {
  MEMBER
  MODERATOR
  ADMIN
}

model GroupUser {
  ID        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [ID])
  userId    Int
  group     Group     @relation(fields: [groupId], references: [ID])
  groupId   Int
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
  groupRole GroupRole @default(MEMBER)

  @@unique([userId, groupId])
}

model ActivityMember {
  ID         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [ID])
  userId     Int
  activity   Activity  @relation(fields: [activityId], references: [ID])
  activityId Int
  createdAt  DateTime  @default(now()) @db.Timestamptz
  updatedAt  DateTime  @updatedAt @db.Timestamptz
  deletedAt  DateTime? @db.Timestamptz
  groupRole  GroupRole @default(MEMBER)

  @@unique([userId, activityId])
}

model Attachment {
  ID        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
  src       String
  mime      String
  message   Message?  @relation(fields: [messageID], references: [ID])
  messageID Int?
}

model Message {
  ID          Int          @id @default(autoincrement())
  content     String
  createdAt   DateTime     @default(now()) @db.Timestamptz
  updatedAt   DateTime     @updatedAt @db.Timestamptz
  deletedAt   DateTime?    @db.Timestamptz
  attachments Attachment[] // Links to distant web for attachments
  sender      User         @relation(fields: [senderId], references: [ID])
  senderId    Int
  group       Group?       @relation(fields: [groupId], references: [ID])
  groupId     Int?
  activity    Activity?    @relation(fields: [activityId], references: [ID])
  activityId  Int?
}

model Activity {
  ID          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now()) @db.Timestamptz
  updatedAt   DateTime         @updatedAt @db.Timestamptz
  deletedAt   DateTime?        @db.Timestamptz
  startDate   DateTime?        @db.Timestamptz()
  endDate     DateTime?        @db.Timestamptz()
  location    String
  tags        String[]
  groups      Group[]
  messages    Message[]
  members     ActivityMember[]
  img         Image?           @relation(fields: [imageId], references: [ID])
  imageId     Int?
}
