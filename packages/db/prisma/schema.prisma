// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  ID           Int       @id @default(autoincrement())
  src          String
  createdAt    DateTime  @default(now()) @db.Timestamptz
  updatedAt    DateTime  @updatedAt @db.Timestamptz
  deletedAt    DateTime? @db.Timestamptz
  filename     String
  mime         String
  size         Int
  checksum     String
  uploadedById Int

  @@index([uploadedById])
  @@index([mime])
  @@index([createdAt])
}

model User {
  ID        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  salt      String
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz

  @@index([email])
  @@index([username])
}

enum GroupType {
  PUBLIC
  PRIVATE
  LOCKED
}

model Group {
  ID          Int       @id @default(autoincrement())
  type        GroupType @default(PUBLIC)
  name        String    @unique
  description String?
  maxSize     Int
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  deletedAt   DateTime? @db.Timestamptz
  startDate   DateTime? @db.Timestamptz
  endDate     DateTime? @db.Timestamptz
  location    String
  tags        String[]

  @@index([name])
  @@index([type])
}

enum GroupRole {
  MEMBER
  MODERATOR
  ADMIN
}

model GroupUser {
  ID        Int       @id @default(autoincrement())
  userId    Int
  groupId   Int
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
  groupRole GroupRole @default(MEMBER)

  @@unique([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

model ActivityMember {
  ID         Int       @id @default(autoincrement())
  userId     Int
  activityId Int
  createdAt  DateTime  @default(now()) @db.Timestamptz
  updatedAt  DateTime  @updatedAt @db.Timestamptz
  deletedAt  DateTime? @db.Timestamptz
  groupRole  GroupRole @default(MEMBER)

  @@unique([userId, activityId])
  @@index([activityId])
  @@index([userId])
}

model Message {
  ID         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now()) @db.Timestamptz
  updatedAt  DateTime  @updatedAt @db.Timestamptz
  deletedAt  DateTime? @db.Timestamptz
  senderId   Int
  groupId    Int?
  activityId Int?

  @@index([senderId])
  @@index([groupId])
  @@index([activityId])
}

model Activity {
  ID          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  deletedAt   DateTime? @db.Timestamptz
  startDate   DateTime? @db.Timestamptz
  endDate     DateTime? @db.Timestamptz
  location    String
  tags        String[]

  @@index([name])
  @@index([startDate])
  @@index([endDate])
}
